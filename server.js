const express = require("express");
const axios = require("axios");
const fs = require("fs-extra");
const yauzl = require("yauzl");
const path = require("path");
const jsonDiff = require("json-diff");
const jp = require("jsonpath");
const Anthropic = require("@anthropic-ai/sdk");

const anthropic = new Anthropic({
	apiKey:
		"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",
});

const app = express();
app.use(express.json());

const ACCESS_TOKEN =
	"eyJhbGciOiJBMjU2S1ciLCJlbmMiOiJBMjU2R0NNIn0.nczOsPYlstdkTDz5wu99rZ5913JhnKWf0AyVS3rdIRxgRIXWRWky0g.WfEFlWwo9STCZFmn.vD7fPd2YKHRkfMeDZtxkF8FfnSO14FkqOBOJNtMNVTGFfz6TpVFwomk-fEirFbdIsCwGs_rWlsGaMiaUAc7fYd6R3_Tow6SypwgUCyuM5wTtJ1sFTOiHyV5LMLCzBnvTYkV6OxgkSHw.lv2pYiYHThm4aI6c8CNA8Q";

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞ –∏–∑ Penpot
async function exportPenpotFile(fileId) {
	console.log(`–ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞: ${fileId}`);

	const downloadDir = path.join(__dirname, "history");
	await fs.ensureDir(downloadDir);

	const payload = {
		fileId: fileId,
		includeLibraries: true,
		embedAssets: false,
		version: 3,
	};

	try {
		const response = await axios.post(
			"https://design.penpot.app/api/rpc/command/export-binfile",
			payload,
			{
				headers: {
					Authorization: `Token ${ACCESS_TOKEN}`,
					"Content-Type": "application/json",
					Accept: "application/json",
				},
				responseType: "arraybuffer",
				timeout: 60000,
			},
		);

		console.log(`–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä: ${response.data.length} –±–∞–π—Ç`);

		const zipPath = path.join(downloadDir, `${fileId}.penpot`);
		await fs.writeFile(zipPath, response.data);

		const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
		const extractDir = path.join(downloadDir, `${fileId}-extract-${timestamp}`);
		await fs.ensureDir(extractDir);
		await unpackZip(zipPath, extractDir);

		await processExtractedFiles(extractDir, fileId);

		console.log(`–≠–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ ${fileId} –∑–∞–≤–µ—Ä—à–µ–Ω`);
		return true;
	} catch (error) {
		console.log(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞ ${fileId}:`, error.message);
		return false;
	}
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ ZIP
function unpackZip(zipPath, extractDir) {
	return new Promise((resolve, reject) => {
		yauzl.open(zipPath, { lazyEntries: true }, (err, zipfile) => {
			if (err) return reject(err);

			zipfile.readEntry();
			zipfile.on("entry", (entry) => {
				if (/\/$/.test(entry.fileName)) {
					zipfile.readEntry();
				} else {
					zipfile.openReadStream(entry, (err, readStream) => {
						if (err) return reject(err);

						const filePath = path.join(extractDir, entry.fileName);
						fs.ensureDirSync(path.dirname(filePath));

						const writeStream = fs.createWriteStream(filePath);
						readStream.pipe(writeStream);

						writeStream.on("close", () => {
							zipfile.readEntry();
						});
					});
				}
			});

			zipfile.on("end", () => {
				console.log(`–ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤: ${extractDir}`);
				resolve();
			});
		});
	});
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
async function processExtractedFiles(extractDir, fileId) {
	const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
	const timestampedDir = path.join(
		__dirname,
		"history",
		`${fileId}-extract-${timestamp}`,
	);

	// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–∞–ø–∫—É —Å timestamp
	await fs.move(extractDir, timestampedDir);

	const fullJsonPath = path.join(timestampedDir, "full.json");
	const flatItems = {};

	const treeData = await buildJsonTree(
		timestampedDir,
		timestampedDir,
		flatItems,
	);

	await fs.writeJson(fullJsonPath, treeData, { spaces: 2 });

	console.log(`–°–æ–∑–¥–∞–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${fullJsonPath}`);
	console.log(`–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${Object.keys(flatItems).length}`);

	// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π
	await compareWithPrevious(fileId, treeData);

	const simplifiedData = transformPenpotData(treeData);
	const simplifiedJsonPath = path.join(timestampedDir, "simplified.json");
	await fs.writeJson(simplifiedJsonPath, simplifiedData, { spaces: 2 });

	console.log(`–°–æ–∑–¥–∞–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${simplifiedJsonPath}`);
	console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${simplifiedData.components.length}`);

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ Storybook
	try {
		await generateComponentsFromSimplified(timestampedDir, fileId);
	} catch (error) {
		console.log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${error.message}`);
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AST
	// try {
	// 	const astData = await generateASTWithClaude(simplifiedData);
	// 	const astJsonPath = path.join(timestampedDir, "ast.json");
	// 	await fs.writeFile(astJsonPath, astData);
	// 	console.log(`–°–æ–∑–¥–∞–Ω AST —Ñ–∞–π–ª: ${astJsonPath}`);
	// } catch (error) {
	// 	console.log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AST: ${error.message}`);
	// }
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–æ–≤
async function buildJsonTree(basePath, rootPath, flatItems) {
	const result = {};

	try {
		const items = await fs.readdir(basePath);

		for (const item of items) {
			const fullPath = path.join(basePath, item);
			const stat = await fs.stat(fullPath);

			if (stat.isDirectory()) {
				result[item] = await buildJsonTree(fullPath, rootPath, flatItems);
			} else if (path.extname(item) === ".json" && item !== "full.json") {
				try {
					const content = await fs.readJson(fullPath);
					result[item] = content;

					if (content && typeof content === "object" && content.id) {
						flatItems[content.id] = content;
					}
				} catch (e) {
					console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å JSON —Ñ–∞–π–ª ${fullPath}:`, e.message);
				}
			}
		}
	} catch (e) {
		console.log(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${basePath}:`, e.message);
	}

	return result;
}

// –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
async function compareWithPrevious(fileId, currentData) {
	const historyDir = path.join(__dirname, "history");
	const previousFiles = await fs.readdir(historyDir);

	// –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
	const previousExtracts = previousFiles
		.filter((name) => name.startsWith(`${fileId}-extract-`))
		.sort()
		.reverse();

	if (previousExtracts.length === 0) {
		console.log("–ü—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
		return;
	}

	if (previousExtracts.length < 2) {
		console.log("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–µ—Ä—Å–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è");
		return;
	}
	const previousExtractDir = path.join(historyDir, previousExtracts[1]);
	const previousJsonPath = path.join(previousExtractDir, "full.json");

	try {
		const previousData = await fs.readJson(previousJsonPath);
		const differences = jsonDiff.diff(previousData, currentData);

		if (differences) {
			console.log("\nüîç –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ò–ó–ú–ï–ù–ï–ù–ò–Ø:");
			console.log(JSON.stringify(differences, null, 2));
		} else {
			console.log("\n–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ");
		}
	} catch (error) {
		console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏:", error.message);
	}
}

// –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ Penpot –¥–∞–Ω–Ω—ã—Ö –≤ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å—Ö–µ–º—É
function transformPenpotData(fullData) {
	const result = {
		components: [],
		metadata: {
			fileName: "UI Components",
			version: "1.0",
			extractedAt: new Date().toISOString(),
		},
	};

	const activeComponents = jp
		.query(fullData, "$..files.*.components.*")
		.filter(
			(comp) =>
				!comp.deleted &&
				!comp.objects &&
				comp.mainInstanceId &&
				comp.id &&
				comp.name,
		);

	console.log(`–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${activeComponents.length}`);

	for (const componentMeta of activeComponents) {
		const mainInstance = jp.query(
			fullData,
			`$..pages.*['${componentMeta.mainInstanceId}.json']`,
		)[0];

		if (!mainInstance) continue;

		const transformedComponent = {
			id: generateComponentId(componentMeta),
			name: componentMeta.name,
			path: componentMeta.path,
			type: mainInstance.type,
			layout: extractLayoutData(mainInstance),
			dimensions: {
				width: mainInstance.width,
				height: mainInstance.height,
			},
			styling: extractStylingData(mainInstance),
			children: extractChildren(fullData, mainInstance),
		};

		result.components.push(transformedComponent);
	}

	return result;
}

function generateComponentId(componentMeta) {
	return (
		componentMeta.path
			.toLowerCase()
			.replace(/\s+/g, "-")
			.replace(/[^a-z0-9-]/g, "") +
		"-" +
		componentMeta.name.toLowerCase().replace(/\s+/g, "-")
	);
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ layout –¥–∞–Ω–Ω—ã—Ö
function extractLayoutData(obj) {
	return {
		type: obj.layout || "auto",
		direction: obj.layoutFlexDir || "row",
		alignItems: obj.layoutAlignItems || "start",
		justifyContent: obj.layoutJustifyContent || "start",
		padding: obj.layoutPadding
			? {
					top: obj.layoutPadding.p1 || 0,
					right: obj.layoutPadding.p2 || 0,
					bottom: obj.layoutPadding.p3 || 0,
					left: obj.layoutPadding.p4 || 0,
				}
			: { top: 0, right: 0, bottom: 0, left: 0 },
		gap: obj.layoutGap
			? {
					row: obj.layoutGap.rowGap || 0,
					column: obj.layoutGap.columnGap || 0,
				}
			: { row: 0, column: 0 },
	};
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
function extractStylingData(obj) {
	const styling = {
		borderRadius: {
			topLeft: obj.r1 || 0,
			topRight: obj.r2 || 0,
			bottomRight: obj.r3 || 0,
			bottomLeft: obj.r4 || 0,
		},
		fills: obj.fills
			? obj.fills.map((fill) => ({
					color: fill.fillColor,
					opacity: fill.fillOpacity || 1,
				}))
			: [],
		strokes: obj.strokes
			? obj.strokes.map((stroke) => ({
					color: stroke.strokeColor,
					width: stroke.strokeWidth || 1,
					style: stroke.strokeStyle || "solid",
					alignment: stroke.strokeAlignment || "center",
				}))
			: [],
	};

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
	if (obj.shadow && obj.shadow.length > 0) {
		styling.shadow = obj.shadow.map((shadow) => ({
			color: shadow.color.color,
			opacity: shadow.color.opacity,
			offsetX: shadow.offsetX || 0,
			offsetY: shadow.offsetY || 0,
			blur: shadow.blur || 0,
			spread: shadow.spread || 0,
			type: shadow.style || "drop-shadow",
		}));
	}

	return styling;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function extractChildren(fullData, mainInstance) {
	if (!mainInstance.shapes) return [];

	return mainInstance.shapes
		.map((shapeId) => {
			const childObj = jp.query(fullData, `$..pages.*['${shapeId}.json']`)[0];
			if (!childObj) return null;

			const child = {
				id: childObj.name.toLowerCase().replace(/\s+/g, "-"),
				name: childObj.name,
				type: childObj.type,
				dimensions: { width: childObj.width, height: childObj.height },
			};

			if (childObj.type === "text" && childObj.content) {
				child.content = extractTextContent(childObj.content);
				child.typography = extractTypography(childObj.content);
			}

			if (childObj.type === "frame" && childObj.shapes) {
				child.layout = extractLayoutData(childObj);
				child.styling = extractStylingData(childObj);
				child.children = extractChildren(fullData, childObj);
			}

			return child;
		})
		.filter(Boolean);
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function extractTextContent(content) {
	if (!content.children) return "";

	let text = "";
	content.children.forEach((paragraphSet) => {
		if (paragraphSet.children) {
			paragraphSet.children.forEach((paragraph) => {
				if (paragraph.children) {
					paragraph.children.forEach((textNode) => {
						if (textNode.text) {
							text += textNode.text;
						}
					});
				}
			});
		}
	});

	return text;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏
function extractTypography(content) {
	const firstTextNode = jp.query(
		content,
		"$..children[0].children[0].children[0]",
	)[0];

	if (!firstTextNode) return {};

	return {
		fontFamily: firstTextNode.fontFamily,
		fontSize: Number.parseInt(firstTextNode.fontSize) || 14,
		fontWeight: Number.parseInt(firstTextNode.fontWeight) || 400,
		lineHeight: Number.parseFloat(firstTextNode.lineHeight) || 1.5,
		textAlign: firstTextNode.textAlign || "left",
		color:
			firstTextNode.fills && firstTextNode.fills[0]
				? firstTextNode.fills[0].fillColor
				: "#000000",
	};
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ simplified.json –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
async function generateSimplifiedFromLatest(fileId) {
	const historyDir = path.join(__dirname, "history");

	try {
		const extractDirs = (await fs.readdir(historyDir))
			.filter((name) => name.startsWith(`${fileId}-extract-`))
			.sort()
			.reverse();

		if (extractDirs.length === 0) {
			throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è ${fileId}`);
		}

		const latestExtractDir = path.join(historyDir, extractDirs[0]);
		const fullJsonPath = path.join(latestExtractDir, "full.json");

		if (!(await fs.pathExists(fullJsonPath))) {
			throw new Error(`–§–∞–π–ª full.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ${latestExtractDir}`);
		}

		const treeData = await fs.readJson(fullJsonPath);
		const simplifiedData = transformPenpotData(treeData);
		const simplifiedJsonPath = path.join(latestExtractDir, "simplified.json");

		await fs.writeJson(simplifiedJsonPath, simplifiedData, { spaces: 2 });

		console.log(`–û–±–Ω–æ–≤–ª–µ–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${simplifiedJsonPath}`);
		console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${simplifiedData.components.length}`);

		return true;
	} catch (error) {
		console.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ simplified.json:`, error.message);
		return false;
	}
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AST —á–µ—Ä–µ–∑ Claude
async function generateASTWithClaude(simplifiedData) {
	const prompt = `
–ó–∞–¥–∞—á–∞: –°–æ–∑–¥–∞–π AST (Abstract Syntax Tree) –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ Penpot.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
${JSON.stringify(simplifiedData, null, 2)}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ AST:
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ layout, styling, dimensions –¥–∞–Ω–Ω—ã–µ
- –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é children
- –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON AST –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏ –±–µ–∑ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
`;

	console.log("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AST —á–µ—Ä–µ–∑ Claude API...");

	try {
		const message = await anthropic.messages.create({
			model: "claude-sonnet-4-20250514",
			max_tokens: 4000,
			messages: [
				{
					role: "user",
					content: [{ type: "text", text: prompt }],
				},
			],
		});

		const textContent = message.content.find(
			(content) => content.type === "text",
		);
		const rawResponse = textContent?.text || "No AST generated";

		const cleanedResponse = rawResponse
			.replace(/```json\s*/g, "")
			.replace(/```\s*/g, "")
			.trim();

		return cleanedResponse;
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AST —á–µ—Ä–µ–∑ Claude:", error.message);
		throw error;
	}
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Claude
async function generateReactComponentWithClaude(componentData, componentName) {
	const prompt = `
–°–æ–∑–¥–∞–π React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Penpot:

–î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:
${JSON.stringify(componentData, null, 2)}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è ${componentName}
2. –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π React —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
3. –ò—Å–ø–æ–ª—å–∑—É–π inline —Å—Ç–∏–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö styling –∏ layout
4. –í–∫–ª—é—á–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–ø—Å–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
5. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞–∫ default export

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: —Ç–æ–ª—å–∫–æ –∫–æ–¥ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –±–µ–∑ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
`;

	try {
		const message = await anthropic.messages.create({
			model: "claude-sonnet-4-20250514",
			max_tokens: 2000,
			messages: [{ role: "user", content: [{ type: "text", text: prompt }] }],
		});

		const textContent = message.content.find(
			(content) => content.type === "text",
		);
		const rawResponse = textContent?.text || "";

		const cleanedResponse = rawResponse
			.replace(/```jsx\s*/g, "")
			.replace(/```javascript\s*/g, "")
			.replace(/```\s*/g, "")
			.trim();

		return cleanedResponse;
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:", error.message);
		throw error;
	}
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Storybook —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Claude
async function generateStorybookWithClaude(componentName) {
	const prompt = `
–°–æ–∑–¥–∞–π Storybook stories —Ñ–∞–π–ª –¥–ª—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${componentName}:

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞–∫ DEFAULT EXPORT: import ${componentName} from '../components/${componentName}.jsx'
2. –°–æ–∑–¥–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ stories —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
3. –í–∫–ª—é—á–∏ controls –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
4. –ò—Å–ø–æ–ª—å–∑—É–π CSF3 —Ñ–æ—Ä–º–∞—Ç (Component Story Format 3)
5. –î–æ–±–∞–≤—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
6. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π default import, –ù–ï –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π import

–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞: 
import ${componentName} from '../components/${componentName}.jsx';

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: —Ç–æ–ª—å–∫–æ –∫–æ–¥ Storybook stories –±–µ–∑ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
`;

	try {
		const message = await anthropic.messages.create({
			model: "claude-sonnet-4-20250514",
			max_tokens: 2000,
			messages: [{ role: "user", content: [{ type: "text", text: prompt }] }],
		});

		const textContent = message.content.find(
			(content) => content.type === "text",
		);
		const rawResponse = textContent?.text || "";

		const cleanedResponse = rawResponse
			.replace(/```typescript\s*/g, "")
			.replace(/```javascript\s*/g, "")
			.replace(/```jsx\s*/g, "")
			.replace(/```\s*/g, "")
			.trim();

		return cleanedResponse;
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Storybook:", error.message);
		throw error;
	}
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ simplified.json
async function generateComponentsFromSimplified(extractDir, fileId) {
	const simplifiedJsonPath = path.join(extractDir, "simplified.json");

	if (!(await fs.pathExists(simplifiedJsonPath))) {
		console.log("simplified.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤");
		return;
	}

	const simplifiedData = await fs.readJson(simplifiedJsonPath);

	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ stories
	const componentsDir = path.join(__dirname, "src/components");
	const storiesDir = path.join(__dirname, "src/stories");

	await fs.ensureDir(componentsDir);
	await fs.ensureDir(storiesDir);

	console.log(`–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ${simplifiedData.components.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...`);

	for (const component of simplifiedData.components) {
		const componentName = component.name
			.replace(/\s+/g, "")
			.replace(/[^a-zA-Z0-9]/g, "");

		if (!componentName) continue;

		try {
			// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
			const reactCode = await generateReactComponentWithClaude(
				component,
				componentName,
			);
			const componentPath = path.join(componentsDir, `${componentName}.jsx`);
			await fs.writeFile(componentPath, reactCode);

			// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Storybook —Ñ–∞–π–ª
			const storybookCode = await generateStorybookWithClaude(componentName);
			const storyPath = path.join(storiesDir, `${componentName}.stories.jsx`);
			await fs.writeFile(storyPath, storybookCode);

			console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: ${componentName}`);
		} catch (error) {
			console.error(
				`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${componentName}:`,
				error.message,
			);
		}
	}

	console.log(`üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤: ${componentsDir}`);
	console.log(`üìö Stories –≤: ${storiesDir}`);
	console.log(`üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ Storybook: npm run storybook`);
}

// Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
app.post("/", async (req, res) => {
	console.log("---------------------------");
	console.log("–ü–æ–ª—É—á–∏–ª–∏ webhook –æ—Ç Penpot!");
	console.log("–í—Ä–µ–º—è:", new Date().toLocaleTimeString());
	console.log("–¢–∏–ø —Å–æ–±—ã—Ç–∏—è:", req.body.name);

	const fileId = req.body.props?.id;

	if (req.body.name === "update-file" && fileId) {
		console.log(`–§–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω: ${fileId}`);
		console.log("–ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞...");

		const exportSuccess = await exportPenpotFile(fileId);

		if (exportSuccess) {
			console.log("–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
		} else {
			console.log("–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π");
		}
	}

	res.sendStatus(200);
});

app.post("/generate-simplified/:fileId", async (req, res) => {
	try {
		console.log(
			`–†—É—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è simplified.json –¥–ª—è —Ñ–∞–π–ª–∞: ${req.params.fileId}`,
		);
		const success = await generateSimplifiedFromLatest(req.params.fileId);
		res.json({
			success,
			message: success
				? "Simplified JSON –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
				: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è simplified.json",
		});
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", error);
		res.status(500).json({
			success: false,
			error: error.message,
		});
	}
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get("/", (req, res) => {
	res.send(`
		<h1>Penpot Webhook Handler</h1>
		<p>–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å webhooks</p>
		<p>–§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫—É: ./history/</p>
		<p>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤: ./src/components/</p>
		
		<h3>–°—Å—ã–ª–∫–∏</h3>
		<a href="http://localhost:6006" target="_blank" style="color: #007bff;">–û—Ç–∫—Ä—ã—Ç—å Storybook (–ø–æ—Ä—Ç 6006)</a>
		<br><br>
		<p>–î–ª—è –∑–∞–ø—É—Å–∫–∞ Storybook –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: <code>npm run storybook</code></p>
	`);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = 3000;
app.listen(PORT, () => {
	console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}`);
	console.log("Webhook URL –¥–ª—è Penpot: –≤–∞—à_ngrok_url");
});
